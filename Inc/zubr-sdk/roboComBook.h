/*
  Проект "roboControllerBoardV2 Контроллер робота"

  Автор
    Сибилев А.С.
  Описание
    Кодовая книга обмена с компьютером

    Долгие ковыряния и анализ показали, что гребаный драйвер usb от st может
    передавать за один раз не более 64 байт. Принятые байты всегда размещаются
    в буфере приема от начала. Соответственно, если передается больше 64 байт,
    то следующая пачка перезаписывает уже принятые байты. Поэтому приходится
    делить посылки на куски размером не более 64 байт.
*/
#ifndef ROBOCOMBOOK_H
#define ROBOCOMBOOK_H


//Наименование оборудования
#define RB_NAME     "roboZubrType"

#define RB_CB_INFO_GET          'I' //Запросить информацию о контроллере. Выдается информация о контроллере (rsp=50)
#define RB_CB_INFO              'i' //Информация о контроллере
                                    // i8[32] - тип оборудования
                                    // i16    - версия ПО
                                    // i32    - идентификатор робота
                                    // i32    - версия робота
                                    // начиная с версии 115
                                    // i32    - серийный номер робота
                                    // начиная с версии 132
                                    // i16    - емкость установленной флэш-памяти в мегабайтах


#define RB_CB_PARAM_VALUE_GET   'V' //Прочитать значение параметра
                                    // i16 - индекс параметра

#define RB_CB_PARAM_VALUE       'v' //Значение параметра
                                    // i16 - индекс параметра
                                    // i32 - значение параметра

#define RB_CB_SLOT              'S' //Управление скриптом
                                    // i8 - номер слота для запуска скрипта или один из CS_SLOT_...


#define RB_CB_SLOT_CODE         'C' //Загрузка кода скрипта
                                    // i32 - смещение блока данных
                                    // i8[32] - блок данных

#define RB_CB_SLOT_OK           's' //Управление скриптом успешно

#define RB_CB_DEBUG             'T' //Управление отладкой
                                    // i8  - номер юнита для чтения
                                    // i16 - индекс ячейки памяти для чтения
                                    // i16 - индекс ячейки для записи (0 - если запись не нужна)
                                    // i32 - записываемое значение
                                    // i8  - номер потока для управления
                                    // i32 - debugStart
                                    // i32 - debugStop
                                    // i8  - debugRun

#define RB_CB_TRACE             't' //Отладочная информация
                                    // i8  - номер юнита
                                    // i16 - положение (параметр 0)
                                    // i16 - параметр 1
                                    // i16 - параметр 2
                                    // i8  - флаг статусов
                                    // i16 - номер прочитанной ячейки
                                    // i32 - значение, прочитанное из ячейки
                                    // i8  - номер потока для состояния
                                    // i32 - ip
                                    // i8  - state


#define RB_CB_UNIT_PARAM        'P' //Чтение-запись параметра юнита
                                    // i8  - индекс канала
                                    // i8  - операция, один из CS_UNIT_PARAM_OPER_xxx (0 - нет операции 1 - чтение, 2 - запись)
                                    // i8  - идентификатор устройства на шине
                                    // i16 - индекс параметра устройства
                                    // i32 - значение параметра



#define RB_CB_FLASH_DATA_GET    'D' //Получить данные из флэш (32 байта)
                                    //i32 - адрес блока

#define RB_CB_FLASH_DATA        'd' //Записать данные во флэш (32 байта)
                                    //i32    - адрес блока
                                    //i8[32] - блок данных

#define RB_CB_FLASH_OK          'O' //Данные во флэш записаны



#define RB_CB_ACCUM_GET         'A' //Получить данные из аккумулятора
                                    //i16 - индекс данных

#define RB_CB_ACCUM_DATA        'a' //Данные из аккумулятора
                                    //i16 - индекс данных
                                    //i16[4*4] - блок данных из 4 записей по 4-м каналам



#define RB_CB_ERASE             'E' //Стереть секторы для прошивки

#define RB_CB_ERASE_OK          'e' //Стирание завершено



#define RB_CB_UPGRADE_DATA      'F' //Записать данные прошивки (32 байта)
                                    //i32    - адрес блока
                                    //i8[32] - блок данных

#define RB_CB_UPGRADE_OK        'f' //Прошивка блока выполнена



#define RB_CB_UNIT_UPGRADE      'U' //Инициировать обновление прошивки юнитов
                                    //i8[5] - битовый массив юнитов, которые требуется прошить
                                    //i32   - смещение программы
                                    //i32   - количество 32-разрядных слов

#define RB_CB_UNIT_UPGRADE_INFO 'u' //Состояние прошивки
                                    //i8    - номер юнита с ошибкой
                                    //i32   - код ошибки или адрес, который не смог прошиться
                                    //i16   - прогресс прошивки

#define RB_CB_UNIT_UPGRADE_GET  'G' //Получить состояние прошивки



#define RB_CB_RL_CONTROL        'R' //Установить новое состояние моторов
                                    //i8      - номер фрейма, для которого устанавливаются моторы
                                    //i16[25] - новое положение мотора
                                    //В ответ возвращается текущее состояние RB_CB_RL_STATE

#define RB_CB_RL_STATE          'r' //Текущее положение моторов
                                    //i8      - номер фрейма, для которого действительны данные показания
                                    //i16[25] - текущее положение мотора

#define RB_CB_RL_STATE_GET      'L' //Получить текущее состояние RL

#define RB_CB_RL_VELO_GET       'B'  //Получить значения скоростей
                                     //В ответ возвращается текущее состояние RB_CB_RL_STATE_VELO

#define RB_CB_RL_STATE_VELO     'b' //Текущее положение моторов и скорости
                                    //i8      - номер фрейма, для которого действительны данные показания
                                    //i16[25] - скорости



#define RB_CB_RL_IMU_GET        'M' //Получить значение IMU

#define RB_CB_RL_IMU            'm' //Значения из IMU
                                    // i16[3] - акселерометр X,Y,Z
                                    // i16[3] - гироскоп X,Y,Z
                                    // i16[4] - кватернион X,Y,Z,W



#endif // ROBOCOMBOOK_H
